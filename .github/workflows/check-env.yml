name: Check .env keys coherence

on:
  pull_request:
    paths:
      - '.env*'
    types: [opened, synchronize, reopened]

jobs:
  env-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Compare .env files
        id: env_check
        run: |
          # Buscar todos los archivos .env*
          ENV_FILES=($(find . -maxdepth 1 -name '.env*' -type f | sort))
          
          if [ ${#ENV_FILES[@]} -lt 2 ]; then
            echo "result=‚ÑπÔ∏è Solo se encontr√≥ ${#ENV_FILES[@]} archivo(s) .env. Se necesitan al menos 2 para comparar." >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Obtener todas las variables √∫nicas
          > all_vars.txt
          for file in "${ENV_FILES[@]}"; do
            grep -E '^[A-Za-z_][A-Za-z0-9_]*=' "$file" | cut -d'=' -f1 >> all_vars.txt
          done
          sort -u all_vars.txt > unique_vars.txt
          
          # Crear reporte
          REPORT=""
          HAS_MISSING=false
          
          for file in "${ENV_FILES[@]}"; do
            # Extraer variables del archivo actual
            grep -E '^[A-Za-z_][A-Za-z0-9_]*=' "$file" | cut -d'=' -f1 | sort > current_vars.txt
            
            # Encontrar variables faltantes
            missing=$(comm -23 unique_vars.txt current_vars.txt)
            
            if [ ! -z "$missing" ]; then
              REPORT="${REPORT}### üö® Variables faltantes en \`$(basename $file)\`:\n"
              while IFS= read -r var; do
                if [ ! -z "$var" ]; then
                  REPORT="${REPORT}- \`$var\`\n"
                fi
              done <<< "$missing"
              REPORT="${REPORT}\n"
              HAS_MISSING=true
            fi
          done
          
          if [ "$HAS_MISSING" = true ]; then
            # Crear reporte final
            FINAL_REPORT="## üîç Variables de Entorno - Faltan Variables\n\n"
            FINAL_REPORT="${FINAL_REPORT}### üìã Archivos analizados:\n"
            for file in "${ENV_FILES[@]}"; do
              var_count=$(grep -cE '^[A-Za-z_][A-Za-z0-9_]*=' "$file")
              FINAL_REPORT="${FINAL_REPORT}- \`$(basename $file)\` (${var_count} variables)\n"
            done
            FINAL_REPORT="${FINAL_REPORT}\n${REPORT}"
            FINAL_REPORT="${FINAL_REPORT}---\nüí° **Sugerencia**: Aseg√∫rate de que todas las variables est√©n presentes en todos los archivos .env."
            
            # Guardar en variable de entorno para el siguiente step
            echo "ENV_RESULT<<EOF" >> $GITHUB_ENV
            echo -e "$FINAL_REPORT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            echo "has_missing=true" >> $GITHUB_OUTPUT
          else
            echo "has_missing=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment missing variables in PR
        if: steps.env_check.outputs.has_missing == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = process.env.ENV_RESULT || "‚ùå No se pudo generar el reporte.";
            
            // Buscar comentarios previos
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üîç Variables de Entorno')
            );
            
            // Actualizar o crear comentario
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Remove old comment if no missing variables
        if: steps.env_check.outputs.has_missing == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üîç Variables de Entorno')
            );
            
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              });
            }